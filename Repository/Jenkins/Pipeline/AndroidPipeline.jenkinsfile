@NonCPS
def getFirChangeString() {
    echo "Gathering SCM changes for fir"
    def firChangeString = ""
    def changeLogSets = currentBuild.changeSets
    for (int i = 0; i < changeLogSets.size(); i++) {
        def entries = changeLogSets[i].items
        for (int j = 0; j < entries.length; j++) {
            def entry = entries[j]
            firChangeString += "\n - ${entry.msg} [${entry.author}]"
        }
    }

    if (!firChangeString) {
        firChangeString = "\n - no new changes"
    }

    return firChangeString
}

@NonCPS
def getChangeString() {
    echo "Gathering SCM changes"
    def changeString = ""
    def changeLogSets = currentBuild.changeSets
    for (int i = 0; i < changeLogSets.size(); i++) {
        def entries = changeLogSets[i].items
        for (int j = 0; j < entries.length; j++) {
            def entry = entries[j]
            changeString += "\\n - ${entry.msg} [${entry.author}]"
        }
    }

    if (!changeString) {
        changeString = "\\n - no new changes"
    }

    return changeString
}

pipeline {

    agent any

    parameters {
        choice(name: "appStore", choices: ["Google", "Amazon", "Huawei", "Xiaomi", "Oppo", "Vivo"], description: "目标商店")
        string(name: "versionCode", defaultValue: "1", description: "版本代码，默认优先使用代码配置")
        string(name: "version", defaultValue: "0.1.0", description: "版本号，默认优先使用代码配置")
        booleanParam(name: "isDebug", defaultValue: true, description: "是否为测试包")
        booleanParam(name: "isReleaseConfig", defaultValue: false, description: "公共库配置是否为发布版本，配置时请只在测试包生效")
        booleanParam(name: "isAppBundle", defaultValue: false, description: "是否为 Bundle 包")
        booleanParam(name: "unityPack", defaultValue: true, description: "是否执行 Unity 流程")
        booleanParam(name: "uploadToFir", defaultValue: true, description: "是否上传至 Fir")
        booleanParam(name: "uploadSymbols", defaultValue: false, description: "是否上传符号表到 Firebase，Release 版本生效")
        booleanParam(name: "notificationOnError", defaultValue: true, description: "打包失败是否通知打包群")
        booleanParam(name: "onlyCheckout", defaultValue: false, description: "只更新工程")

        gitParameter(name: "buildBranch", type: "PT_BRANCH", defaultValue: "master", branchFilter: "origin/(.*)", quickFilterEnabled: true)
    }

    environment {
        //--------------------------------------------------------------------------------
        // 根据配置修改
        //--------------------------------------------------------------------------------

        PROJECT_NAME = "tripeaks"
        GIT_PATH = "ssh://ci-agent@gerrit.lexinshengwen.com:29418/${PROJECT_NAME}"
        GIT_CERT = "ci-agent-gerrit"

        UNITY_PATH = "${UNITY2021_3_21}"
        EXECUTE_PATH = "tripeaks-unity"
        EXECUTE_METHOD = "Build.Editor.BuildManager.BuildAuto"
        EXPORT_PATH = "build/new"
        CACHE_PATH = "build"
        BUILD_JSON_PATH = "~/.${PROJECT_NAME}-cache/build-size-android.json"

        BUNDLE_TOOL_PATH = "jenkins/bundletool-all-1.8.2.jar"
        KEYSTORE_PATH = "jenkins/keystore/ywkj.keystore"
        FIREBASE_APP_ID = "google-services.json 中的 mobilesdk_app_id"
        FIREBASE_TOKEN = "安装工具 sudo npm install -g firebase-tools，通过 firebase login:ci 命令生成"

        ROBOT_TOKEN = "飞书机器人 ID，关键词包含'更新'和'包'"
        CI_URL = "https://ci.lexinshengwen.com 打包机地址"
        FIR_URL = "http://fir.lexinshengwen.com/xxxx 对应产品唯一编码"


        //--------------------------------------------------------------------------------
        // 固定变量
        //--------------------------------------------------------------------------------

        FIR_TOKEN = "a35bc2b89917f80c9099aeddb2a449de"

        MODE = """
            ${sh (returnStdout: true, script:
            "if [[ ${params.isDebug} == 'true' ]]; then echo debug; else echo release; fi"
            )}""".trim()

        RELEASE_CONFIG = """
            ${sh (returnStdout: true, script:
            "if [[ ${params.isDebug} == 'false' || ${params.isReleaseConfig} == 'true' ]]; \
            then echo release; else echo debug; fi"
            )}""".trim()

        APP_BUNDLE = """
            ${sh (returnStdout: true, script:
            "if [[ ${params.isAppBundle} == 'true' ]]; then echo aab; else echo apk; fi"
            )}""".trim()
    }

    stages {
        stage("GitBranch") {
            steps {
                git url: "${GIT_PATH}", credentialsId: "${GIT_CERT}", branch: "${params.buildBranch}"
            }
        }

        stage("UpdateGit") {
            steps {
                sh "git reset --hard"
                sh "git clean -df"
                sh "git submodule init"
                sh "git submodule update"
            }
        }

        stage("UnityPack") {
            when {
                expression { return params.unityPack && !params.onlyCheckout }
            }
            environment {
                UNITY_LOG = "${CACHE_PATH}/build.log"
            }
            steps {
                lock("UnityLock") {
                    sh "${UNITY_PATH} -projectPath ${EXECUTE_PATH} -executeMethod ${EXECUTE_METHOD} -quit \
                        -batchmode -buildTarget Android -logFile ${UNITY_LOG} -appStore=${params.appStore} \
                        -versionCode=${params.versionCode} -version=${params.version} -isDebug=${params.isDebug} \
                        -isReleaseConfig=${params.isReleaseConfig} -isAppBundle=${params.isAppBundle}"
                    sh "cat ${UNITY_LOG}"
                }
            }
        }

        stage("BundleToApk") {
            when {
                expression { return params.isAppBundle && !params.onlyCheckout }
            }
            environment {
                OUTPUT = "${EXPORT_PATH}/output"
            }
            steps {
                sh "cp ${EXPORT_PATH}/*.aab ${OUTPUT}.aab"
                sh "java -jar ${BUNDLE_TOOL_PATH} build-apks --bundle=${OUTPUT}.aab --output=${OUTPUT}.apks \
                --ks=${KEYSTORE_PATH} --ks-pass=pass:Newstartup1  --ks-key-alias=newstartup \
                --key-pass=pass:Newstartup1 --mode=universal"

                sh "unzip -d ${EXPORT_PATH} ${OUTPUT}.apks"
                sh "rm -r ${OUTPUT}.apks"
                sh "rm -r ${OUTPUT}.aab"

                sh """
                files=\$(ls ${EXPORT_PATH}/*.aab)
                fullname=\$(echo \$files | sed 's/\\.[^.]*\$//')
                filename=\$(basename \$fullname)
                cp ${EXPORT_PATH}/universal.apk ${CACHE_PATH}/\$filename.apk
                mv ${EXPORT_PATH}/universal.apk ${EXPORT_PATH}/\$filename.apk
                """
            }
        }

        stage("CompareBuildSize"){
            when {
                expression { return params.uploadToFir && !params.onlyCheckout }
            }
            environment {
                BUILD_COMPARE_TEMP = "build-compare-temp.txt"
            }
            steps {
                sh """
                info_temp=\$(echo ${EXPORT_PATH}/BuildInfoTemp)
                info=\$(cat \${info_temp})
                python3 compare-size.py ${BUILD_JSON_PATH} \${info} ${EXPORT_PATH} apk ${BUILD_COMPARE_TEMP}
                """
                script {
                    COMPARE_LOG = readFile(file: "${BUILD_COMPARE_TEMP}")
                }
                sh "rm -r ${BUILD_COMPARE_TEMP}"
            }
        }

        stage("UploadToFir") {
            when {
                expression { return params.uploadToFir && !params.onlyCheckout }
            }
            steps {
                sh """
                fir publish ${EXPORT_PATH}/*.apk -T ${FIR_TOKEN} -c "BRANCH: ${params.buildBranch} STORE: \
                ${params.appStore} MODE: ${MODE} CONFIG: ${RELEASE_CONFIG} APP: ${APP_BUNDLE} CHANGELOG: ${firChangeString}"
                """
            }
            post {
                success {
                    sh """
                    curl 'https://open.feishu.cn/open-apis/bot/v2/hook/${ROBOT_TOKEN}' \
                         -X POST -H 'Content-Type: application/json' \
                         -d '{ "msg_type": "post", "content": { "post": { "zh_cn": {
                            "title": "${PROJECT_NAME} ${params.appStore} 更新",
                            "content": [[
                                { "tag": "text", "text": "下载链接：" },
                                { "tag": "a", "text": "Jenkins", "href": "${CI_URL}" },
                                { "tag": "text", "text": "、" },
                                { "tag": "a", "text": "Fir", "href": "${FIR_URL}" }
                            ],[
                                { "tag": "text", "text": "\\n BRANCH: ${params.buildBranch}  MODE: ${MODE}  CONFIG: ${RELEASE_CONFIG}  APP: ${APP_BUNDLE}\\n" },
                                { "tag": "text", "text": "\\n 包体对比: ${COMPARE_LOG}\\n\\n CHANGELOG: ${changeString}\\n\\n" },
                                { "tag": "at", "user_id": "all", "user_name": "所有人" }
                            ]]
                         }}}}'
                    """
                }
            }
        }

        stage("UploadSymbols") {
            when {
                expression { return params.uploadSymbols && !params.isDebug && !params.onlyCheckout }
            }
            options {
                retry(3)
            }
            steps {
                sh """
                firebase crashlytics:symbols:upload --app=${FIREBASE_APP_ID} ${EXPORT_PATH}/*.symbols.zip \
                --token ${FIREBASE_TOKEN}
                """
            }
        }
    }

    post {
        failure {
            script {
                if (params.notificationOnError && !params.onlyCheckout) {
                    sh """
                    curl 'https://open.feishu.cn/open-apis/bot/v2/hook/${ROBOT_TOKEN}' \
                         -X POST -H 'Content-Type: application/json' \
                         -d '{ "msg_type": "post", "content": { "post": { "zh_cn": {
                            "title": "${PROJECT_NAME} ${params.appStore} 打包失败",
                            "content": [[{ "tag": "at", "user_id": "all", "user_name": "所有人" }]]
                         }}}}'
                    """
                }
            }
        }
    }
}